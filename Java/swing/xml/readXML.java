import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException; 
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.xml.parsers.DocumentBuilder; 
import javax.xml.parsers.DocumentBuilderFactory; 
import javax.xml.parsers.FactoryConfigurationError; 
import javax.xml.parsers.ParserConfigurationException; 
import org.w3c.dom.Document;
import org.w3c.dom.DOMException; 
import org.w3c.dom.Node;
import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 


/**
 * ParseXML.  This is a wrapper class for processing the xml file
 * that contains the configuration information for devices.
 *
 * @author Clifton Hudson
 * @version 1.0 24 Mar 2004
 *
 */
class ParseXML{
	
	private Document document;
	
	public ParseXML(String file){
		
		try{
			/**
			 * Invoke a DocumentBuilderFactory object, set it to
			 * check validation.
			 */
			
			DocumentBuilderFactory factory =
			DocumentBuilderFactory.newInstance();
			factory.setValidating(true);

			/**
			 * Create a builder to parse the xml file.
			 */			
			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.parse(new File(file));

			/**
			 * Create a model from the document based on the xml file and
			 * make it into a JTree object.
			 */
			TreeModelAdapter model = new TreeModelAdapter(document);
			JTree tree = new JTree(model);
			tree.setShowsRootHandles(true);
			
			DeviceListConfigurationType config = new DeviceListConfigurationType(tree);
			System.out.println();
			System.out.println("Domain Name: " + getDomainName(config));
			System.out.println("IORString: " + getIORString(config));
			Vector list = getList(config);
			config.printList();
			
			
			/**
			 * Transform the xml file into a displayable JTree.
			 */
			showTree(tree);
			
		}

		catch(SAXParseException spe){
			//Error generated by parser
			System.out.println("\n** Parsing error" +
				", line " + spe.getLineNumber() +
				", uri " + spe.getSystemId());
			System.out.println("  " + spe.getMessage());
			
			// Use the exception
			Exception x = spe;
			if(spe.getException() != null){
				x = spe.getException();
			}
			x.printStackTrace();
			
		}
		catch(SAXException se){
			//Error generated during parsing
			Exception x = se;
			if(se.getException() != null){				
				x = se.getException();
			}
			x.printStackTrace();
			
		}
		catch(ParserConfigurationException pce){
			//Parser with specified options can't be built
			pce.printStackTrace();
		}
		catch(IOException ioe){
			// I/O error
			ioe.printStackTrace();
		}
	}
	
	/**
	 * This code displays the tree based on the xml file 
	 * read in and is for debugging purposes only.
	 */
	private void showTree(JTree tree){
		
		/**
		 * Put the tree object in a JScrollPane and put it
		 * all into a GUI app.
		 */
		JScrollPane scrollPane = new JScrollPane(tree);
		scrollPane.setPreferredSize(new Dimension(400,400));
		JFrame frame = new JFrame();
		frame.setTitle("Reading an XML file into a DOM Object");
		Container contentPane = frame.getContentPane();
		contentPane.setLayout(new BorderLayout());
		contentPane.add(scrollPane);
		frame.pack();
		Location loc = new Location(frame);
		loc.setLocation("x");
		frame.setVisible(true);
		
		frame.addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e){
				System.exit(0);
			}
		});
	}

	public String getDomainName(DeviceListConfigurationType config){
		return config.getDomainName();
	}
	
	public String getIORString(DeviceListConfigurationType config){
		return config.getIORString();
	}
	
	public Vector getList(DeviceListConfigurationType config){
		return config.getList();
	}
	
}



/**
 * readXML.  This class serves as a test driver for exercising the
 * XML file parsing APIs related to the "devices.xml" file.
 *
 * @author Clifton Hudson
 * @version 1.0 22 Mar 2004
 */

public class readXML{
	
	private static final String xmlFile = "devices.xml";
	
	public static void main(String [] args){
		ParseXML parseXML = new ParseXML(xmlFile);
	}
}