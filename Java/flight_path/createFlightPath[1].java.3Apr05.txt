import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.*;
import java.awt.Font;
import java.awt.Insets;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;

import java.lang.Math;
import java.lang.Long;
import java.lang.Double;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Vector;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.JFormattedTextField.*;
import javax.swing.table.AbstractTableModel;

class GenericComboBoxModel extends DefaultComboBoxModel
{

 	private Object item;
 	private Vector list;
 	
	public GenericComboBoxModel(Vector v)
	{
		list = new Vector(v);
	}
	
	public void addElement(Object anObject)
	{
		list.add(anObject);
	    int length = getSize();
	    fireIntervalAdded(this, length-1, length-1);
	}
 
	public Object getElementAt(int index)
	{
		return (Object)list.elementAt(index);
	}
	
	public int getIndexOf(Object anObject)
	{
		return list.indexOf(anObject);
	}
	
 	public Object getSelectedItem()
	{
	 	return item;
 	}
 	
 	public int getSize()
	{
	 	return list.size();
 	}
 	
	public void insertElementAt(Object anObject, int index)
	{
		list.insertElementAt(anObject,index);
	    fireIntervalAdded(this, index, index);
	}
	
	public void removeAllElements()
	{
		list.removeAllElements();
		int length = list.size();
		fireIntervalRemoved(this, length, length);
	}
	
	public void removeElement(Object anObject)
	{
		int index = list.indexOf(anObject);
		list.removeElement(anObject);
		fireIntervalRemoved(this, index, index);
	}
	
	public void removeElementAt(int index)
	{
		list.removeElementAt(index);
		fireIntervalRemoved(this, index, index);
	}
	
 	public void setSelectedItem(Object anObject)
	{
	 	item = anObject;
 	}

}

class IntegerList
{
	public IntegerList(int start, int end)
	{
		list = new Vector();
		createList(start,end);
	}

	void createList(int start, int end)
	{
		for(int i=start; i<=end; i++)
		{
			String n = "" + i;
			list.addElement(n);
		}
	}

	public Vector getList()
	{
		return list;
	}

	private Vector list;
}

class DoubleList
{
	public DoubleList(double start, double end)
	{
		list = new Vector();
		createList(start,end);
	}

	void createList(double start, double end)
	{
		for(double i=start; i<=end; i+=0.01)
		{
	      DecimalFormat degFormat = new DecimalFormat("###.##");
			list.addElement(degFormat.format(i));
		}
	}

	public Vector getList()
	{
		return list;
	}

	private Vector list;
}


class RangeVerifier extends InputVerifier 
{
	public RangeVerifier(Double s, Double e)
	{
		dStart = s;
		dEnd   = e;
		type = "double";
	}

	public RangeVerifier(Integer s, Integer e)
	{
		iStart = s;
		iEnd   = e;
		type = "integer";
	}

	public RangeVerifier(Long s, Long e)
	{
		lStart = s;
		lEnd   = e;
		type = "long";
	}
	
	public boolean verify(JComponent input) 
	{
		if (input instanceof JFormattedTextField) 
		{
			GenericTextField gtf = (GenericTextField)input;
			String text = gtf.getText();
			
			try
			{
				NumberFormat nf = NumberFormat.getNumberInstance();
				nf.setParseIntegerOnly(false);

				Number value = nf.parse(text);

				if (type.equals("double"))
				{
					if ((value.doubleValue() > (dStart.doubleValue() - 0.01)) 
							&& (value.doubleValue() <= dEnd.doubleValue()))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else if(type.equals("integer"))
				{
					if ((value.intValue() > iStart.intValue()) 
							&& (value.intValue() <= iEnd.intValue()))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else if(type.equals("long"))
				{
					if ((value.longValue() > lStart.longValue()) 
							&& (value.longValue() <= lEnd.longValue()))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
			}
			catch (ParseException pe)
			{
				return false;
			}
		}
		return false; 
	}

	public boolean shouldYieldFocus(JComponent input)
	{
		return verify(input);
	}

	private String type;
	private Double dStart;
	private Double dEnd;
	private Integer iStart;
	private Integer iEnd;
	private Long lStart;
	private Long lEnd;
}

class GenericTextField extends JFormattedTextField
{
		public GenericTextField(NumberFormat format,
										int width,
										Double start, 
										Double end)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setInputVerifier(new RangeVerifier(start,end));
		}

		public GenericTextField(NumberFormat format, 
										int width,
										Integer start, 
										Integer end)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setInputVerifier(new RangeVerifier(start,end));
		}

		public GenericTextField(NumberFormat format,
										int width,
										Long start,
										Long end)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setInputVerifier(new RangeVerifier(start,end));
		}

		public GenericTextField(NumberFormat format,
										int width)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setEditable(false);
		}
}

strictfp class Point
{
	public Point(double lt, double lg, double alt)
	{
		latitude  = lt;
		longitude = lg;
		altitude  = alt;
	}

	public double getLongDeg()
	{
		return ((longitude * 180)/Math.PI);
	}

	public double getLatDeg()
	{
		return ((latitude * 180)/Math.PI);
	}
	public double getAlt()
	{
		return (altitude);
	}

	private double longitude;
	private double latitude;
	private double altitude;
}

class TableModel extends AbstractTableModel
{
	public TableModel(Vector p)
	{
		path = p;
		cols = 4;
		rows = p.size();
		
		degFormat = NumberFormat.getNumberInstance();
		degFormat.setMaximumIntegerDigits(3);
		degFormat.setMinimumFractionDigits(2);
		degFormat.setMaximumFractionDigits(2);
	}

	public int getRowCount()
	{
		return rows;
	}

	public int getColumnCount()
	{
		return cols;
	}

	public Object getValueAt(int r, int c)
	{
		Point p = (Point)path.elementAt(r);
		Object item = "";
		if (c == 0)
		{
			item = new Integer(r);
		}
		else if (c == 1)
		{
			item = degFormat.format(new Double(p.getLatDeg()));
		}
		else if (c == 2)
		{
			item = degFormat.format(new Double(p.getLongDeg()));
		}
		else if (c == 3)
		{
			item = new Double(p.getAlt());
		}
		return item;
	}

	public String getColumnName(int c)
	{
		String item = "";
		if (c == 0)
		{
			item = new String("Index");
		}
		else if (c == 1)
		{
			item = new String("Latitude");
		}
		else if (c == 2)
		{
			item = new String("Longitude");
		}
		else if (c == 3)
		{
			item = new String("Altitude");
		}
		return item;
	}

	private NumberFormat degFormat;
	private int rows;
	private int cols;
	private Vector path;
}

	
strictfp class FlightPath
{
	public FlightPath(double oLat, 
						double oLong,
						double dLat,
						double dLong,
						double alt,
						double spd,
						double incr)
	{
		incrementPath = new Vector();
		intervalPath  = new Vector();
		origLat       = Math.toRadians(oLat);
		origLong      = Math.toRadians(oLong);
		destLat       = Math.toRadians(dLat);
		destLong      = Math.toRadians(dLong);
		altitude      = Math.toRadians(alt);
		speed         = spd;
		increment     = incr;

		calcDistance();
		calcTimeMilliSeconds();
		createPathBasedOnIncrements();
		createPathBasedOnTimeInterval();
	}

	void createPathBasedOnTimeInterval()
	{

	}

	void createPathBasedOnIncrements()
	{
		for(int i=0; i<=increment; i++)
		{
				double A     = Math.sin((1 - (i/increment)) * distance) / Math.sin(distance);
				double B     = Math.sin((i/increment) * distance) / Math.sin(distance);
				double x     = A * Math.cos(origLat) * Math.cos(origLong) + B * Math.cos(destLat) * Math.cos(destLong);
				double y     = A * Math.cos(origLat) * Math.sin(origLong) + B * Math.cos(destLat) * Math.sin(destLong);
				double z     = A * Math.sin(origLat)                      + B * Math.sin(destLat);
				double iLat  = Math.atan2(z, Math.sqrt(Math.pow(x,2) + Math.pow(y,2)));
				double iLong = Math.atan2(y, x);
				double iAlt  = 0;
				Point p = new Point(iLat, iLong, iAlt);
				incrementPath.addElement(p);
		}
	}

	void calcDistance()
	{
		distance = Math.acos(Math.sin(origLat) 
									* Math.sin(destLat) 
									+ Math.cos(origLat) 
									* Math.cos(destLat)
									* Math.cos(origLong - destLong));
	}

	public void calcTimeMilliSeconds()
	{
		timeMS = (getDistanceKm() * 1000 * 60 * 60) / speed;
	}

	public Vector getIncrementPath()
	{
		return incrementPath;
	}

	public Vector getTimeIntervalPath()
	{
		return intervalPath;
	}

	public double getTimeMS()
	{
		return timeMS;
	}

	public double getTimeSec()
	{
		return (timeMS / 1000);
	}

	public double getTimeMin()
	{
		return (timeMS / (1000 * 60));
	}

	public double getTimeHr()
	{
		return (timeMS / (1000 * 60 * 60));
	}

	public double getDistanceRadians()
	{
		return distance;
	}

	public double getDistanceKm()
	{
		double radiusEarthKms = 6366.71;
		return ((Math.toDegrees(distance)/180) * Math.PI * radiusEarthKms);
	}

	public double getDistanceMiles()
	{
		double radiusEarthMiles = 3956.09;
		return ((Math.toDegrees(distance)/180) * Math.PI * radiusEarthMiles);
	}

	public double getDistanceNms()
	{
		double radiusEarthNms = 3435.43;
		return ((Math.toDegrees(distance)/180) * Math.PI * radiusEarthNms);
	}

	public void printTimeIntervalPath()
	{

	}

	public void printIncrementPath()
	{
		NumberFormat degFormat = NumberFormat.getNumberInstance();
		degFormat.setMaximumIntegerDigits(3);
		degFormat.setMinimumFractionDigits(4);
		degFormat.setMaximumFractionDigits(4);
		
		for(int i=0; i<incrementPath.size(); i++)
		{
			Point p = (Point)incrementPath.elementAt(i);
			System.out.println("" + i + ":\t" 
							+ degFormat.format(p.getLatDeg()) + "\t"
							+ degFormat.format(p.getLongDeg()) + "\t"
							+ p.getAlt());
		}
	}
	
	private double timeMS, 
						origLong,
						origLat,
						destLong,
						destLat,
						altitude,
						speed,
						distance,
						increment;
	private Point point;
	private Vector incrementPath,
					intervalPath;
}


class FlightPathGui extends JFrame
{
	public FlightPathGui()
	{
		setTitle("Flight Path Generator");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//		setSize(new Dimension(500,250));

		panel = new JPanel();
		panel.setLayout(new GridBagLayout());
		Border border = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);

		add(panel,new JLabel("Latitude"),2,1,1,1,"C");
		add(panel,new JLabel("Longitude"),4,1,1,1,"C");

		NumberFormat degFormat = NumberFormat.getNumberInstance();
		degFormat.setMaximumIntegerDigits(3);
		degFormat.setMinimumFractionDigits(4);
		degFormat.setMaximumFractionDigits(4);
		
		origLatTF  = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));
		origLongTF = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));
		destLatTF  = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));
		destLongTF = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));

		origLatTF.setValue(new Double(0.0000));
		origLongTF.setValue(new Double(0.0000));
		destLatTF.setValue(new Double(0.0000));
		destLongTF.setValue(new Double(0.0000));

		add(panel,new JLabel("Origin"),1,2,1,1,"E");
		add(panel,origLatTF,2,2,1,1,"E");
		add(panel,Box.createRigidArea(new Dimension(20,20)),3,2,1,1,"E");
		add(panel,origLongTF,4,2,1,1,"E");
	
		add(panel,new JLabel("Destination"),1,3,1,1,"E");
		add(panel,destLatTF,2,3,1,1,"E");
		add(panel,Box.createRigidArea(new Dimension(20,20)),3,3,1,1,"C");
		add(panel,destLongTF,4,3,1,1,"E");

		JLabel warning = new JLabel("Prefix East Latitude and South Longitude with a '-'");
		warning.setFont(new Font("Courier", Font.PLAIN, 12));
		warning.setForeground(new Color(0xff0000));
		warningPanel = new JPanel();
		warningPanel.add(warning);

		topPanel = new JPanel();
		topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.Y_AXIS));
		topPanel.setBorder(border);
		topPanel.add(panel);
		topPanel.add(warningPanel);

		NumberFormat intFormat = NumberFormat.getNumberInstance();
		intFormat.setMaximumIntegerDigits(5);
		intFormat.setMinimumFractionDigits(0);
		intFormat.setMaximumFractionDigits(0);

		middlePanel = new JPanel(new GridBagLayout());
		middlePanel.setBorder(border);

		altitudeTF = new GenericTextField(intFormat,6,new Integer(-1),new Integer(99999));
		altitudeTF.setValue(new Integer(0));
		add(middlePanel,new JLabel("Altitude (m)"),1,1,1,1,"E");
		add(middlePanel,altitudeTF,2,1,1,1,"E");
		
		add(middlePanel,Box.createRigidArea(new Dimension(20,20)),3,1,1,1,"C");
		
		speedTF = new GenericTextField(intFormat,6,new Integer(-1),new Integer(99999));
		speedTF.setValue(new Integer(0));
		add(middlePanel,new JLabel("Speed (kph)"),4,1,1,1,"E");
		add(middlePanel,speedTF,5,1,1,1,"E");

		intermediatePtTF = new GenericTextField(intFormat,6,new Integer(-1), new Integer(100000));
		intermediatePtTF.setValue(new Integer(0));
		add(middlePanel,new JLabel("Intermediate Points"),1,2,1,1,"E");
		add(middlePanel,intermediatePtTF,2,2,1,1,"E");

		add(middlePanel,Box.createRigidArea(new Dimension(20,20)),3,2,1,1,"C");
		
		timeIntervalTF = new GenericTextField(intFormat,7,new Integer(-1), new Integer(1000000));
		timeIntervalTF.setValue(new Integer(0));
		add(middlePanel,new JLabel("Time Interval"),4,2,1,1,"E");
		add(middlePanel,timeIntervalTF,5,2,1,1,"E");

		NumberFormat radiansFormat = NumberFormat.getNumberInstance();
		radiansFormat.setMaximumFractionDigits(6);
		
		NumberFormat distanceTimeFormat = NumberFormat.getNumberInstance();
		distanceTimeFormat.setMaximumFractionDigits(2);

		radiansTF       = new GenericTextField(radiansFormat,10);
		kilometersTF    = new GenericTextField(distanceTimeFormat,10);
		milesTF         = new GenericTextField(distanceTimeFormat,10);
		nauticalMilesTF = new GenericTextField(distanceTimeFormat,10);

		millisecondsTF  = new GenericTextField(distanceTimeFormat,10);
		secondsTF       = new GenericTextField(distanceTimeFormat,10);
		minutesTF       = new GenericTextField(distanceTimeFormat,10);
		hoursTF         = new GenericTextField(distanceTimeFormat,10);
		
		distanceTimePanel = new JPanel(new GridBagLayout());
		distanceTimePanel.setBorder(border);

		add(distanceTimePanel,new JLabel("Distance"),2,1,1,1,"C");

		add(distanceTimePanel,new JLabel("Radians"),1,2,1,1,"E");
		add(distanceTimePanel,radiansTF,2,2,1,1,"E");

		add(distanceTimePanel,new JLabel("Kilometers"),1,3,1,1,"E");
		add(distanceTimePanel,kilometersTF,2,3,1,1,"E");

		add(distanceTimePanel,new JLabel("Miles"),1,4,1,1,"E");
		add(distanceTimePanel,milesTF,2,4,1,1,"E");

		add(distanceTimePanel,new JLabel("Nautical Miles"),1,5,1,1,"E");
		add(distanceTimePanel,nauticalMilesTF,2,5,1,1,"E");

		add(distanceTimePanel,new JLabel("Travel Time"),4,1,2,1,"C");
		
		add(distanceTimePanel,new JLabel("Milliseconds"),3,2,1,1,"E");
		add(distanceTimePanel,millisecondsTF,4,2,1,1,"E");

		add(distanceTimePanel,new JLabel("Seconds"),3,3,1,1,"E");
		add(distanceTimePanel,secondsTF,4,3,1,1,"E");

		add(distanceTimePanel,new JLabel("Minutes"),3,4,1,1,"E");
		add(distanceTimePanel,minutesTF,4,4,1,1,"E");

		add(distanceTimePanel,new JLabel("Hours"),3,5,1,1,"E");
		add(distanceTimePanel,hoursTF,4,5,1,1,"E");

		calculateBtn = new JButton("Calculate");
		exitBtn = new JButton("Exit");
		bottomPanel = new JPanel();
		bottomPanel.setBorder(border);
		bottomPanel.add(calculateBtn);
		bottomPanel.add(exitBtn);

		table = new JTable();
		tablePanel = new JPanel();
		JScrollPane scrollPane = new JScrollPane(table);
		tablePanel.add(scrollPane);
		
		mainPanel = new JPanel();
		mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
		mainPanel.add(topPanel);
		mainPanel.add(middlePanel);
		mainPanel.add(distanceTimePanel);
		mainPanel.add(tablePanel);
		mainPanel.add(bottomPanel);

		getContentPane().add(mainPanel);
		pack();

		calculateBtn.addActionListener
		(
			new ActionListener()
			{
				public void actionPerformed(ActionEvent e)
				{
					Double olat  = new Double(origLatTF.getValue().toString());
					Double olong = new Double(origLongTF.getValue().toString());
					Double dlat  = new Double(destLatTF.getValue().toString());
					Double dlong = new Double(destLongTF.getValue().toString());
			  		Double alt   = new Double(altitudeTF.getValue().toString());
			  		Double spd   = new Double(speedTF.getValue().toString());
					Double incre = new Double(intermediatePtTF.getValue().toString());

					FlightPath p = new FlightPath(olat.doubleValue(), 
													olong.doubleValue(), 
													dlat.doubleValue(), 
													dlong.doubleValue(), 
													alt.doubleValue(), 
													spd.doubleValue(),
													incre.doubleValue());

					radiansTF.setValue(new Double(p.getDistanceRadians()));
					kilometersTF.setValue(new Double(p.getDistanceKm()));
					milesTF.setValue(new Double(p.getDistanceMiles()));
					nauticalMilesTF.setValue(new Double(p.getDistanceNms()));
					millisecondsTF.setValue(new Double(p.getTimeMS()));
					secondsTF.setValue(new Double(p.getTimeSec()));
					minutesTF.setValue(new Double(p.getTimeMin()));
					hoursTF.setValue(new Double(p.getTimeHr()));

					TableModel model = new TableModel(p.getIncrementPath());
					table.setVisible(false);
					table.setModel(model);
					table.setVisible(true);

//					p.printIncrementPath();
				}
			}
		);

		exitBtn.addActionListener
		(
		 	new ActionListener()
			{
				public void actionPerformed(ActionEvent e)
				{
					System.exit(0);
				}
			}
		);
	}

	void add(Container c, Component comp, int x, int y, int w, int h, String anchor)
	{
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx              = x;
		gbc.gridy              = y;
		gbc.gridwidth          = w;
		gbc.gridheight         = h;
		gbc.insets             = new Insets(3,3,3,3);

		if      (anchor.equals("C")){gbc.anchor = GridBagConstraints.CENTER;}
		else if (anchor.equals("E")){gbc.anchor = GridBagConstraints.EAST;}
		else if (anchor.equals("W")){gbc.anchor = GridBagConstraints.WEST;}

		c.add(comp,gbc);
	}		

	private JPanel mainPanel,
					panel,
					warningPanel,
					topPanel,
					middlePanel,
					distanceTimePanel,
					bottomPanel,
					tablePanel;

	private JButton calculateBtn,
	                exitBtn;

	private GenericTextField origLongTF,
							origLatTF,
							destLongTF,
							destLatTF,
							altitudeTF,
							speedTF,
							intermediatePtTF,
							timeIntervalTF,
							radiansTF,
							kilometersTF,
							milesTF,
							nauticalMilesTF,
							millisecondsTF,
							secondsTF,
							minutesTF,
							hoursTF;

	private JTable table;

}
		


public class createFlightPath
{
	public static void main(String [] args)
	{
		FlightPathGui path = new FlightPathGui();
		path.setVisible(true);
	}
}
