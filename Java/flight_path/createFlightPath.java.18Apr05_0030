import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.*;
import java.awt.Font;
import java.awt.Insets;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;

import java.lang.Math;
import java.lang.Long;
import java.lang.Double;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Vector;
import java.util.Collections;
import java.util.Comparator;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.JFormattedTextField.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.SwingConstants;

class RangeVerifier extends InputVerifier 
{
	public RangeVerifier(Double s, Double e)
	{
		dStart = s;
		dEnd   = e;
		type = "double";
	}

	public RangeVerifier(Integer s, Integer e)
	{
		iStart = s;
		iEnd   = e;
		type = "integer";
	}

	public RangeVerifier(Long s, Long e)
	{
		lStart = s;
		lEnd   = e;
		type = "long";
	}
	
	public boolean verify(JComponent input) 
	{
		if (input instanceof JFormattedTextField) 
		{
			GenericTextField gtf = (GenericTextField)input;
			String text = gtf.getText();
			
			try
			{
				NumberFormat nf = NumberFormat.getNumberInstance();
				nf.setParseIntegerOnly(false);

				Number value = nf.parse(text);

				if (type.equals("double"))
				{
					if ((value.doubleValue() > (dStart.doubleValue() - 0.01)) 
							&& (value.doubleValue() <= dEnd.doubleValue()))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else if(type.equals("integer"))
				{
					if ((value.intValue() > iStart.intValue()) 
							&& (value.intValue() <= iEnd.intValue()))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else if(type.equals("long"))
				{
					if ((value.longValue() > lStart.longValue()) 
							&& (value.longValue() <= lEnd.longValue()))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
			}
			catch (ParseException pe)
			{
				return false;
			}
		}
		return false; 
	}

	public boolean shouldYieldFocus(JComponent input)
	{
		return verify(input);
	}

	private String type;
	private Double dStart;
	private Double dEnd;
	private Integer iStart;
	private Integer iEnd;
	private Long lStart;
	private Long lEnd;
}

class GenericTextField extends JFormattedTextField
{
		public GenericTextField(NumberFormat format,
										int width,
										Double start, 
										Double end)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setInputVerifier(new RangeVerifier(start,end));
		}

		public GenericTextField(NumberFormat format, 
										int width,
										Integer start, 
										Integer end)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setInputVerifier(new RangeVerifier(start,end));
		}

		public GenericTextField(NumberFormat format,
										int width,
										Long start,
										Long end)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setInputVerifier(new RangeVerifier(start,end));
		}

		public GenericTextField(NumberFormat format,
										int width)
		{
			super(format);
			setHorizontalAlignment(JTextField.RIGHT);
			setColumns(width);
			setEditable(false);
		}
}

strictfp class Point
{
	public Point(int trkID, double lt, double lg, double dist)
	{
		trackID    = trkID;
		latitude   = lt;
		longitude  = lg;
		distance   = dist;
	}

	public Point(int trkID, double lt, double lg, double dist, long tm)
	{
		trackID    = trkID;
		latitude   = lt;
		longitude  = lg;
		distance   = dist;
		timeOffset = tm;
	}

	public double getLongDeg()
	{
		return ((longitude * 180)/Math.PI);
	}

	public double getLatDeg()
	{
		return ((latitude * 180)/Math.PI);
	}
	public double getDistanceKm()
	{
		double radiusEarthKms = 6366.71;
		return ((Math.toDegrees(distance)/180) * Math.PI * radiusEarthKms);
	}

	public long getTimeOffset()
	{
		return timeOffset;
	}

	public int getTrackID()
	{
		return trackID;
	}

	private int trackID;
	private double longitude;
	private double latitude;
	private double distance;
	private long timeOffset;
}

class DoubleRenderer extends DefaultTableCellRenderer
{
    public DoubleRenderer()
	{
		super(); 
		setHorizontalAlignment(SwingConstants.RIGHT);
		format = NumberFormat.getNumberInstance();
		format.setMinimumFractionDigits(4);
		format.setMaximumFractionDigits(4);
	}

    public void setValue(Object value)
	{
       	setText(format.format(value));
    }

    private NumberFormat format;
}

class DistanceRenderer extends DefaultTableCellRenderer
{
    public DistanceRenderer()
	{
		super(); 
		setHorizontalAlignment(SwingConstants.RIGHT);
		format = NumberFormat.getNumberInstance();
		format.setMinimumFractionDigits(2);
		format.setMaximumFractionDigits(2);
	}

    public void setValue(Object value)
	{
       	setText(format.format(value));
    }

    private NumberFormat format;
}

class Distance extends Number
{
	public Distance(double d)
	{
		value = new Double(d);
	}

	public double doubleValue()
	{
		return value.doubleValue();
	}

	public float floatValue()
	{
		return (float)value.doubleValue();
	}

	public int intValue()
	{
		return (int)value.doubleValue();
	}

	public long longValue()
	{
		return (long)value.doubleValue();
	}

	private Double value;
}


class IndexTableModel extends DefaultTableModel
{
	public IndexTableModel(Vector p)
	{
		path = p;
		cols = 4;
		rows = p.size();
	}

	public int getRowCount()
	{
		return rows;
	}

	public int getColumnCount()
	{
		return cols;
	}

    public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();
    }

	public Object getValueAt(int r, int c)
	{
		Point p = (Point)path.elementAt(r);
		Object item = "";
		if (c == 0)
		{
			item = new Integer(r);
		}
		else if (c == 1)
		{
			item = new Double(p.getLatDeg());
		}
		else if (c == 2)
		{
			item = new Double(p.getLongDeg());
		}
		else if (c == 3)
		{
			item = new Distance(p.getDistanceKm());
		}
		return item;
	}

	public String getColumnName(int c)
	{
		String item = "";
		if (c == 0)
		{
			item = new String("Index");
		}
		else if (c == 1)
		{
			item = new String("Latitude");
		}
		else if (c == 2)
		{
			item = new String("Longitude");
		}
		else if (c == 3)
		{
			item = new String("Distance");
		}
		return item;
	}

	public boolean isCellEditable(int r, int c)
	{
		return false;
	}

	private int rows;
	private int cols;
	private Vector path;
}

class TimeTableModel extends DefaultTableModel
{
	public TimeTableModel(Vector p)
	{
		path = p;
		cols = 5;
		rows = p.size();
	}

	public int getRowCount()
	{
		return rows;
	}

	public int getColumnCount()
	{
		return cols;
	}

    public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();
    }

	public Object getValueAt(int r, int c)
	{
		Point p = (Point)path.elementAt(r);
		Object item = "";
		if (c == 0)
		{
			item = new Integer(r);
		}
		else if (c == 1)
		{
			item = new Long(p.getTimeOffset());
		}
		else if (c == 2)
		{
			item = new Double(p.getLatDeg());
		}
		else if (c == 3)
		{
			item = new Double(p.getLongDeg());
		}
		else if (c == 4)
		{
			item = new Distance(p.getDistanceKm());
		}
		return item;
	}

	public String getColumnName(int c)
	{
		String item = "";
		if (c == 0)
		{
			item = new String("Index");
		}
		else if (c == 1)
		{
			item = new String("Time Offset");
		}
		else if (c == 2)
		{
			item = new String("Latitude");
		}
		else if (c == 3)
		{
			item = new String("Longitude");
		}
		else if (c == 4)
		{
			item = new String("Distance Offset");
		}
		return item;
	}

	public boolean isCellEditable(int r, int c)
	{
		return false;
	}

	private int rows;
	private int cols;
	private Vector path;
}

class MultiTrackTimeTableModel extends DefaultTableModel
{
	public MultiTrackTimeTableModel(Vector p)
	{
		path = p;
		cols = 6;
		rows = p.size();
	}

	public int getRowCount()
	{
		return rows;
	}

	public int getColumnCount()
	{
		return cols;
	}

    public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();
    }

	public Object getValueAt(int r, int c)
	{
		Point p = (Point)path.elementAt(r);
		Object item = "";
		if (c == 0)
		{
			item = new Integer(r);
		}
		else if (c == 1)
		{
			item = new Integer(p.getTrackID());
		}
		else if (c == 2)
		{
			item = new Long(p.getTimeOffset());
		}
		else if (c == 3)
		{
			item = new Double(p.getLatDeg());
		}
		else if (c == 4)
		{
			item = new Double(p.getLongDeg());
		}
		else if (c == 5)
		{
			item = new Distance(p.getDistanceKm());
		}
		return item;
	}

	public String getColumnName(int c)
	{
		String item = "";
		if (c == 0)
		{
			item = new String("Index");
		}
		else if (c == 1)
		{
			item = new String("Track #");
		}
		else if (c == 2)
		{
			item = new String("Time Offset");
		}
		else if (c == 3)
		{
			item = new String("Latitude");
		}
		else if (c == 4)
		{
			item = new String("Longitude");
		}
		else if (c == 5)
		{
			item = new String("Distance Offset");
		}
		return item;
	}

	public boolean isCellEditable(int r, int c)
	{
		return false;
	}

	private int rows;
	private int cols;
	private Vector path;
}

	
strictfp class FlightPath
{
	public FlightPath(int trkID,
						double oLat, 
						double oLong,
						double dLat,
						double dLong,
						double alt,
						double spd,
						double incr,
						long time)
	{
		incrementPath = new Vector();
		offsetPath    = new Vector();

		trackID       = trkID;
		origLat       = toRadians(oLat);
		origLong      = toRadians(oLong);
		destLat       = toRadians(dLat);
		destLong      = toRadians(dLong);
		altitude      = alt;
		speed         = spd;
		increment     = incr;
		timeInterval  = time;

		totalDistance = getDistance(origLat, origLong, destLat, destLong);
		totalTimeMS   = getTimeMilliSecondsBasedOnKm(totalDistance,speed);
		course        = getCourse(origLat, origLong, destLat, destLong, totalDistance);

		createPathBasedOnIncrements();
		createPathBasedOnTimeInterval();
	}

	double getCourse(double oLat, double oLong, double dLat, double dLong, double dist)
	{
		double course = 0;

		if (Math.sin(dLong - oLong) < 0)
		{

			course = Math.acos((Math.sin(dLat) - Math.sin(oLat) * Math.cos(dist)) /
					(Math.sin(dist) * Math.cos(oLat)));
		}
		else
		{
			course = 2 * Math.PI - Math.acos((Math.sin(dLat) - Math.sin(oLat) * Math.cos(dist)) /
					(Math.sin(dist) * Math.cos(oLat)));
		}

		return course;
	}

	double getDestLat(double oLat, double course, double dist)
	{
		return (Math.asin(Math.sin(oLat) * Math.cos(dist) + Math.cos(oLat) * Math.sin(dist) * Math.cos(course)));
	}

	double getDestLong(double oLong, double oLat, double dLat, double course, double dist)
	{
		double dLong = 0;

		if(Math.cos(dLat) == 0)
		{
			dLong = oLong;
		}
		else
		{
			// For all distances
			double y = Math.sin(course) * Math.sin(dist) * Math.cos(oLat);
			double x = Math.cos(dist) - Math.sin(oLat) * Math.sin(dLat);
			double z = 0;
			
			if(x > 0)
			{
				z = Math.atan(y/x);
			}
			else if(x < 0 && y >= 0)
			{
				z = Math.atan(y/x) + Math.PI;
			}
			else if(x == 0 && y > 0)
			{
				z = Math.PI/2;
			}
			else if(x < 0 && y < 0)
			{
				z = Math.atan(y/x) - Math.PI;
			}
			else if(x == 0 && y < 0)
			{
				z = -Math.PI/2;
			}

			double remainder = Math.IEEEremainder(oLong - z + Math.PI, 2 * Math.PI);

			double result = remainder - Math.PI;

			if(result <= -Math.PI)
			{
				dLong = result + 2 * Math.PI;
			}
			else
			{
				dLong = result;
			}
		}

		return dLong;
	}

	void createPathBasedOnTimeInterval()
	{
		if ((timeInterval > 0) && (speed > 0)) 
		{
			long start       = timeInterval;
			double iDistance = 0;
			double iLat      = 0;
			double iLong     = 0;
			long offset      = 0;
			long lastOffset  = 0;
			Point p;

			// Get initial course based on orig/dest coordinates and total distance
			// 
			double course = getCourse(origLat, origLong, destLat, destLong, totalDistance);

			for(offset=0; offset<totalTimeMS; offset += timeInterval)
			{
				iDistance = getDistance(offset, speed);
				iLat      = getDestLat(origLat, course, iDistance);
				iLong     = getDestLong(origLong, origLat, iLat, course, iDistance);
				p         = new Point(trackID, iLat, iLong, iDistance, offset + System.currentTimeMillis());
				offsetPath.addElement(p);
				lastOffset = offset;
			}

			if(lastOffset < totalTimeMS)
			{
				long diff = (long)totalTimeMS - lastOffset;
				iDistance = iDistance + getDistance(diff, speed);
				iLat      = getDestLat(origLat, course, iDistance);
				iLong     = getDestLong(origLong, origLat, iLat, course, iDistance);
				p         = new Point(trackID, iLat, iLong, iDistance, (lastOffset + diff) + System.currentTimeMillis());
				offsetPath.addElement(p);
			}
		}
	}

	void createPathBasedOnIncrements()
	{
		if(increment > 0)
		{
			Point p;
			double A     = 0;
			double B     = 0;
			double x     = 0;
			double y     = 0;
			double z     = 0;
			double iLat  = 0;
			double iLong = 0;
			double iAlt  = 0;
			double iDist = 0;

			for(int i=0; i<=increment; i++)
			{
					A     = Math.sin((1 - (i/increment)) * totalDistance) / Math.sin(totalDistance);
					B     = Math.sin((i/increment) * totalDistance) / Math.sin(totalDistance);
					x     = A * Math.cos(origLat) * Math.cos(origLong) + B * Math.cos(destLat) * Math.cos(destLong);
					y     = A * Math.cos(origLat) * Math.sin(origLong) + B * Math.cos(destLat) * Math.sin(destLong);
					z     = A * Math.sin(origLat)                      + B * Math.sin(destLat);
					iLat  = Math.atan2(z, Math.sqrt(Math.pow(x,2) + Math.pow(y,2)));
					iLong = Math.atan2(y, x);
					iAlt  = 0;
					iDist = getDistance(origLat,origLong,iLat,iLong);
					p = new Point(trackID, iLat, iLong, iDist);
					incrementPath.addElement(p);
			}
		}
	}

	public double getDistance(double timeMS, double spdKPH)
	{
		double dist = 0;
		if((timeMS > 0) && (spdKPH > 0))
		{
			double radiusEarthKms = 6366.71;
			dist = (timeMS * spdKPH) / (1000 * 60 * 60 * radiusEarthKms);
		}
		return dist;
	}

	public double getDistance(double oLat, double oLong, double dLat, double dLong)

	{
		return Math.acos(Math.sin(oLat) 
									* Math.sin(dLat) 
									+ Math.cos(oLat) 
									* Math.cos(dLat)
									* Math.cos(oLong - dLong));
	}

	public double getTimeMilliSecondsBasedOnKm(double dist, double spd)
	{
		double time = 0;
		if((dist > 0) && (spd > 0))
		{
			double radiusEarthKms = 6366.71;
			time = dist * radiusEarthKms * 1000 * 60 * 60 / spd;
		}
		return time;
	}

	public Vector getIncrementPath()
	{
		return incrementPath;
	}

	public Vector getTimeIntervalPath()
	{
		return offsetPath;
	}

	public double getTimeMS()
	{
		return totalTimeMS;
	}

	public double getTimeSec()
	{
		return (totalTimeMS / 1000);
	}

	public double getTimeMin()
	{
		return (totalTimeMS / (1000 * 60));
	}

	public double getTimeHr()
	{
		return (totalTimeMS / (1000 * 60 * 60));
	}

	public double getDistanceRadians()
	{
		return totalDistance;
	}

	public double getDistanceKm()
	{
		double radiusEarthKms = 6366.71;
		return ((Math.toDegrees(totalDistance)/180) * Math.PI * radiusEarthKms);
	}

	public double getDistanceMiles()
	{
		double radiusEarthMiles = 3956.09;
		return ((Math.toDegrees(totalDistance)/180) * Math.PI * radiusEarthMiles);
	}

	public double getDistanceNms()
	{
		double radiusEarthNms = 3435.43;
		return ((Math.toDegrees(totalDistance)/180) * Math.PI * radiusEarthNms);
	}

	public double getHeadingRad()
	{
		return course;
	}

	public double getHeadingDeg()
	{
		return toDegrees(course);
	}

	public double toRadians(double degree)
	{
		return degree * Math.PI / 180;
	}

	public double toDegrees(double radians)
	{
		return (180 / Math.PI) * radians;
	}

	public int getTrackID()
	{
		return trackID;
	}

	public void printTimeIntervalPath()
	{
		NumberFormat timeFormat = NumberFormat.getNumberInstance();
		timeFormat.setMaximumFractionDigits(2);

		NumberFormat degFormat = NumberFormat.getNumberInstance();
		degFormat.setMaximumFractionDigits(4);
		
		NumberFormat distFormat = NumberFormat.getNumberInstance();
		distFormat.setMaximumFractionDigits(4);
		
		for(int i=0; i<offsetPath.size(); i++)
		{
			Point p = (Point)offsetPath.elementAt(i);
			System.out.println("" + i + ":\t" 
							+ timeFormat.format(p.getTimeOffset()) + "\t"
							+ degFormat.format(p.getLatDeg()) + "\t"
							+ degFormat.format(p.getLongDeg()) + "\t"
							+ distFormat.format(p.getDistanceKm()));
		}
	}

	public void printIncrementPath()
	{
		NumberFormat degFormat = NumberFormat.getNumberInstance();
		degFormat.setMinimumFractionDigits(4);
		degFormat.setMaximumFractionDigits(4);
		
		for(int i=0; i<incrementPath.size(); i++)
		{
			Point p = (Point)incrementPath.elementAt(i);
			System.out.println("" + i + ":\t" 
							+ degFormat.format(p.getLatDeg()) + "\t"
							+ degFormat.format(p.getLongDeg()) + "\t"
							+ degFormat.format(p.getDistanceKm()));
		}
	}

	private int trackID;
	private double origLong,
						origLat,
						destLong,
						destLat,
						altitude,
						speed,
						totalDistance,
						increment,
						totalTimeMS,
						course;
	private long timeInterval;
	private Point point;
	private Vector incrementPath,
					offsetPath;
}

class MultiTrackFlightPath
{
	public MultiTrackFlightPath(int numTrks,
										double offst,
										double oLat, 
										double oLong,
										double dLat,
										double dLong,
										double alt,
										double spd,
										double incr,
										long time)
	{
		path                = new Vector();

		trackCount          = numTrks;
		offsetBetweenTracks = offst;
		origLat             = oLat;
		origLong            = oLong;
		destLat             = dLat;
		destLong            = dLong;
		altitude            = alt;
		speed               = spd;
		increment           = incr;
		timeInterval        = time;

		System.out.println("trackCount:          " + trackCount);
		System.out.println("offsetBetweenTracks: " + offsetBetweenTracks);
		System.out.println("origLat:             " + origLat);
		System.out.println("origLong:            " + origLong);
		System.out.println("destLat:             " + destLat);
		System.out.println("destLong:            " + destLong);
		System.out.println("altitude:            " + altitude);
		System.out.println("speed:               " + speed);
		System.out.println("increment:           " + increment);
		System.out.println("timeInterval:        " + timeInterval);

		calculateMultiTrackPath();
		sortPath();

		System.out.println("size: " + path.size());
	}

	void calculateMultiTrackPath()
	{
		for(int track = 0; track <= trackCount; track++)
		{
			System.out.println("track:  " + track);

			try
			{
				Thread.sleep((long)offsetBetweenTracks);

				FlightPath p = new FlightPath(track,
									origLat,
									origLong,
									destLat,
									destLong,
									altitude,
									speed,
									increment,
									timeInterval);

				path.addAll(p.getTimeIntervalPath());
			}
			catch(InterruptedException e)
			{

			}
		}
	}

	void sortPath()
	{
		Collections.sort
		(path, new Comparator()
			{
				public int compare(Object a, Object b)
				{
					long t1 = (long)((Point)a).getTimeOffset();
					long t2 = (long)((Point)b).getTimeOffset();
					
					if(t1 < t2) return -1;
					if(t1 > t2) return 1;
					return 0;
				}
			}
		);
	}

	Vector getPath()
	{
		return path;
	}
							
	private Vector path;
	private double trackCount;
	private double offsetBetweenTracks;
	private double origLat;
	private double origLong;
	private double destLat;
	private double destLong;
	private double altitude;
	private double speed;
	private double increment;
	private long timeInterval;
}

class FlightPathGui extends JFrame
{
	public FlightPathGui()
	{
		setTitle("Flight Path Generator");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		panel = new JPanel();
		panel.setLayout(new GridBagLayout());
		Border border = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);

		add(panel,new JLabel("Latitude"),2,1,1,1,"C");
		add(panel,new JLabel("Longitude"),3,1,1,1,"C");

		NumberFormat degFormat = NumberFormat.getNumberInstance();
		degFormat.setMaximumIntegerDigits(3);
		degFormat.setMinimumFractionDigits(4);
		degFormat.setMaximumFractionDigits(4);
		
		origLatTF  = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));
		origLongTF = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));
		destLatTF  = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));
		destLongTF = new GenericTextField(degFormat,6,new Double(-179.9999),new Double(180.0000));

		origLatTF.setValue(new Double(0.0000));
		origLongTF.setValue(new Double(0.0000));
		destLatTF.setValue(new Double(0.0000));
		destLongTF.setValue(new Double(0.0000));

		add(panel,new JLabel("Origin"),1,2,1,1,"E");
		add(panel,origLatTF,2,2,1,1,"E");
	//	add(panel,Box.createRigidArea(new Dimension(20,20)),3,2,1,1,"E");
		add(panel,origLongTF,3,2,1,1,"E");
	
		add(panel,new JLabel("Destination"),1,3,1,1,"E");
		add(panel,destLatTF,2,3,1,1,"E");
	//	add(panel,Box.createRigidArea(new Dimension(20,20)),3,3,1,1,"C");
		add(panel,destLongTF,3,3,1,1,"E");

		add(panel,Box.createRigidArea(new Dimension(20,20)),4,2,1,2,"C");
		reverseBtn = new JButton("Reverse Direction");
		add(panel,reverseBtn,5,2,1,2,"C");

		reverseBtn.addActionListener
		(
			new ActionListener()
			{
				public void actionPerformed(ActionEvent e)
				{
					String oLat  = origLatTF.getValue().toString();
					String oLong = origLongTF.getValue().toString();
					String dLat  = destLatTF.getValue().toString();
					String dLong = destLongTF.getValue().toString();

					origLatTF.setValue(new Double(dLat));
					origLongTF.setValue(new Double(dLong));
					destLatTF.setValue(new Double(oLat));
					destLongTF.setValue(new Double(oLong));
				}
			}
		);

		JLabel warning = new JLabel("Prefix East Latitude and South Longitude with a '-'");
		warning.setFont(new Font("Courier", Font.PLAIN, 12));
		warning.setForeground(new Color(0xff0000));
		warningPanel = new JPanel();
		warningPanel.add(warning);

		topPanel = new JPanel();
		topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.Y_AXIS));
		topPanel.setBorder(border);
		topPanel.add(panel);
		topPanel.add(warningPanel);

		NumberFormat intFormat = NumberFormat.getNumberInstance();
		intFormat.setMaximumIntegerDigits(10);
		intFormat.setMinimumFractionDigits(0);
		intFormat.setMaximumFractionDigits(0);

		middleLeftPanel = new JPanel(new GridBagLayout());
		middleLeftPanel.setBorder(border);

		altitudeTF = new GenericTextField(intFormat,6,new Integer(-1),new Integer(99999));
		altitudeTF.setValue(new Integer(0));
		add(middleLeftPanel,new JLabel("Altitude (m)"),1,1,1,1,"E");
		add(middleLeftPanel,altitudeTF,2,1,1,1,"W");
		
//		add(middleLeftPanel,Box.createRigidArea(new Dimension(20,20)),3,1,1,1,"C");
		
		speedTF = new GenericTextField(intFormat,8,new Integer(-1),new Integer(99999));
		speedTF.setValue(new Integer(0));
		add(middleLeftPanel,new JLabel("Speed (kph)"),3,1,1,1,"E");
		add(middleLeftPanel,speedTF,4,1,1,1,"W");

		intermediatePtTF = new GenericTextField(intFormat,6,new Integer(-1), new Integer(100000));
		intermediatePtTF.setValue(new Integer(0));
		add(middleLeftPanel,new JLabel("Intermediate Points"),1,2,1,1,"E");
		add(middleLeftPanel,intermediatePtTF,2,2,1,1,"W");

//		add(middleLeftPanel,Box.createRigidArea(new Dimension(20,20)),3,2,1,1,"C");
		
		timeIntervalTF = new GenericTextField(intFormat,8,new Integer(-1), new Integer(1000000000));
		timeIntervalTF.setValue(new Integer(0));
		add(middleLeftPanel,new JLabel("Time Interval (ms)"),3,2,1,1,"E");
		add(middleLeftPanel,timeIntervalTF,4,2,1,1,"W");

		add(middleLeftPanel,new JLabel("Display Type: "),1,6,1,1,"E");

		indexBasedRadioBtn = new JRadioButton("Intermediate");
		indexBasedRadioBtn.setSelected(true);

		timeBasedRadioBtn = new JRadioButton("Time");
		timeBasedRadioBtn.setSelected(false);

		ButtonGroup group = new ButtonGroup();
		group.add(indexBasedRadioBtn);
		group.add(timeBasedRadioBtn);

		add(middleLeftPanel,indexBasedRadioBtn,2,6,1,1,"E");
		add(middleLeftPanel,timeBasedRadioBtn,3,6,1,1,"E");

		middleRightPanel = new JPanel(new GridBagLayout());
		middleRightPanel.setBorder(border);

		singleTrackBtn = new JRadioButton("Single");
		singleTrackBtn.setSelected(true);
		multiTrackBtn = new JRadioButton("Multiple");
		multiTrackBtn.setSelected(false);

		ButtonGroup trackGrp = new ButtonGroup();
		trackGrp.add(singleTrackBtn);
		trackGrp.add(multiTrackBtn);

		multiTrackTF = new GenericTextField(intFormat,6,new Integer(-1),new Integer(10000));
		multiTrackTF.setValue(new Integer(0));
		offsetBetweenTracksTF = new GenericTextField(intFormat,6,new Integer(-1),new Integer(1000000));
		offsetBetweenTracksTF.setValue(new Integer(0));
		
		add(middleRightPanel,new JLabel("Tracks"),1,1,2,1,"C");
		add(middleRightPanel,singleTrackBtn,1,2,1,1,"W");
		add(middleRightPanel,multiTrackBtn,1,3,1,1,"W");
		add(middleRightPanel,multiTrackTF,2,3,1,1,"W");
		add(middleRightPanel,new JLabel("Offset: "),1,4,1,1,"E");
		add(middleRightPanel,offsetBetweenTracksTF,2,4,1,1,"W");

		middlePanel = new JPanel();
		middlePanel.setLayout(new BoxLayout(middlePanel,BoxLayout.X_AXIS));
		middlePanel.add(middleLeftPanel);
		middlePanel.add(middleRightPanel);

		NumberFormat radiansFormat = NumberFormat.getNumberInstance();
		radiansFormat.setMaximumFractionDigits(6);
		
		NumberFormat distanceTimeFormat = NumberFormat.getNumberInstance();
		distanceTimeFormat.setMaximumFractionDigits(2);

		radiansTF       = new GenericTextField(radiansFormat,10);
		kilometersTF    = new GenericTextField(distanceTimeFormat,10);
		milesTF         = new GenericTextField(distanceTimeFormat,10);
		nauticalMilesTF = new GenericTextField(distanceTimeFormat,10);
		headingRadTF    = new GenericTextField(radiansFormat,10);

		millisecondsTF  = new GenericTextField(distanceTimeFormat,10);
		secondsTF       = new GenericTextField(distanceTimeFormat,10);
		minutesTF       = new GenericTextField(distanceTimeFormat,10);
		hoursTF         = new GenericTextField(distanceTimeFormat,10);
		headingDegTF    = new GenericTextField(degFormat,10);
		
		distanceTimePanel = new JPanel(new GridBagLayout());
		distanceTimePanel.setBorder(border);

		add(distanceTimePanel,new JLabel("Distance"),2,1,1,1,"C");

		add(distanceTimePanel,new JLabel("Radians"),1,2,1,1,"E");
		add(distanceTimePanel,radiansTF,2,2,1,1,"E");

		add(distanceTimePanel,new JLabel("Kilometers"),1,3,1,1,"E");
		add(distanceTimePanel,kilometersTF,2,3,1,1,"E");

		add(distanceTimePanel,new JLabel("Miles"),1,4,1,1,"E");
		add(distanceTimePanel,milesTF,2,4,1,1,"E");

		add(distanceTimePanel,new JLabel("Nautical Miles"),1,5,1,1,"E");
		add(distanceTimePanel,nauticalMilesTF,2,5,1,1,"E");

		add(distanceTimePanel,new JLabel("Heading (rad)"),1,6,1,1,"E");
		add(distanceTimePanel,headingRadTF,2,6,1,1,"E");

		add(distanceTimePanel,new JLabel("Travel Time"),4,1,2,1,"C");
		
		add(distanceTimePanel,new JLabel("Milliseconds"),3,2,1,1,"E");
		add(distanceTimePanel,millisecondsTF,4,2,1,1,"E");

		add(distanceTimePanel,new JLabel("Seconds"),3,3,1,1,"E");
		add(distanceTimePanel,secondsTF,4,3,1,1,"E");

		add(distanceTimePanel,new JLabel("Minutes"),3,4,1,1,"E");
		add(distanceTimePanel,minutesTF,4,4,1,1,"E");

		add(distanceTimePanel,new JLabel("Hours"),3,5,1,1,"E");
		add(distanceTimePanel,hoursTF,4,5,1,1,"E");

		add(distanceTimePanel,new JLabel("Heading (deg)"),3,6,1,1,"E");
		add(distanceTimePanel,headingDegTF,4,6,1,1,"E");

		calculateBtn = new JButton("Calculate");
		exitBtn = new JButton("Exit");
		bottomPanel = new JPanel();
		bottomPanel.setBorder(border);
		bottomPanel.add(calculateBtn);
		bottomPanel.add(exitBtn);

		table = new JTable();
		table.setColumnSelectionAllowed(true);
		table.setCellSelectionEnabled(true);
		JScrollPane scrollPane = new JScrollPane(table,
									JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
									JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		table.setPreferredScrollableViewportSize(new Dimension(300,300));
		table.setDefaultRenderer(Double.class,new DoubleRenderer());
		table.setDefaultRenderer(Distance.class,new DistanceRenderer());

		mainPanel = new JPanel();
		mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
		mainPanel.add(topPanel);
		mainPanel.add(middlePanel);
		mainPanel.add(distanceTimePanel);
		mainPanel.add(scrollPane);
		mainPanel.add(bottomPanel);

		getContentPane().add(mainPanel);
		pack();

		calculateBtn.addActionListener
		(
			new ActionListener()
			{
				public void actionPerformed(ActionEvent e)
				{
					Double olat  = new Double(origLatTF.getValue().toString());
					Double olong = new Double(origLongTF.getValue().toString());
					Double dlat  = new Double(destLatTF.getValue().toString());
					Double dlong = new Double(destLongTF.getValue().toString());
			  		Double alt   = new Double(altitudeTF.getValue().toString());
			  		Double spd   = new Double(speedTF.getValue().toString());
					Double incre = new Double(intermediatePtTF.getValue().toString());
					Double time  = new Double(timeIntervalTF.getValue().toString());

					flightPath = new FlightPath(0,
										olat.doubleValue(), 
										olong.doubleValue(), 
										dlat.doubleValue(), 
										dlong.doubleValue(), 
										alt.doubleValue(), 
										spd.doubleValue(),
										incre.doubleValue(),
										time.longValue());

					radiansTF.setValue(new Double(flightPath.getDistanceRadians()));
					kilometersTF.setValue(new Double(flightPath.getDistanceKm()));
					milesTF.setValue(new Double(flightPath.getDistanceMiles()));
					nauticalMilesTF.setValue(new Double(flightPath.getDistanceNms()));
					headingRadTF.setValue(new Double(flightPath.getHeadingRad()));
					millisecondsTF.setValue(new Double(flightPath.getTimeMS()));
					secondsTF.setValue(new Double(flightPath.getTimeSec()));
					minutesTF.setValue(new Double(flightPath.getTimeMin()));
					hoursTF.setValue(new Double(flightPath.getTimeHr()));
					headingDegTF.setValue(new Double(flightPath.getHeadingDeg()));

					if(singleTrackBtn.isSelected())
					{
						if(indexBasedRadioBtn.isSelected())
						{
							IndexTableModel indexModel = new IndexTableModel(flightPath.getIncrementPath());
							table.setVisible(false);
							table.setModel(indexModel);
							table.setVisible(true);
						}
						else if(timeBasedRadioBtn.isSelected())
						{
							TimeTableModel timeModel = new TimeTableModel(flightPath.getTimeIntervalPath());
							table.setVisible(false);
							table.setModel(timeModel);
							table.setVisible(true);
						}
					}
					else
					{
						Integer trackCount = new Integer(multiTrackTF.getValue().toString());
						Integer offset     = new Integer(offsetBetweenTracksTF.getValue().toString());
						
						multiTrackFlightPath = new MultiTrackFlightPath(trackCount.intValue(),
																offset.intValue(),
																olat.doubleValue(), 
																olong.doubleValue(), 
																dlat.doubleValue(), 
																dlong.doubleValue(), 
																alt.doubleValue(), 
																spd.doubleValue(),
																incre.doubleValue(),
																time.longValue());

						MultiTrackTimeTableModel multiTrackModel = new MultiTrackTimeTableModel(multiTrackFlightPath.getPath());
						table.setVisible(false);
						table.setModel(multiTrackModel);
						table.setVisible(true);
					}

//					flightPath.printIncrementPath();
//					flightPath.printTimeIntervalPath();
				}
			}
		);

		exitBtn.addActionListener
		(
		 	new ActionListener()
			{
				public void actionPerformed(ActionEvent e)
				{
					System.exit(0);
				}
			}
		);
	}

	void add(Container c, Component comp, int x, int y, int w, int h, String anchor)
	{
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx              = x;
		gbc.gridy              = y;
		gbc.gridwidth          = w;
		gbc.gridheight         = h;
		gbc.insets             = new Insets(3,3,3,3);

		if      (anchor.equals("C")){gbc.anchor = GridBagConstraints.CENTER;}
		else if (anchor.equals("E")){gbc.anchor = GridBagConstraints.EAST;}
		else if (anchor.equals("W")){gbc.anchor = GridBagConstraints.WEST;}

		c.add(comp,gbc);
	}		

	private JPanel mainPanel,
					panel,
					warningPanel,
					topPanel,
					middleLeftPanel,
					middleRightPanel,
					middlePanel,
					distanceTimePanel,
					bottomPanel;

	private JButton calculateBtn,
							exitBtn,
							reverseBtn;

	private JRadioButton indexBasedRadioBtn,
								timeBasedRadioBtn,
								singleTrackBtn,
								multiTrackBtn;

	private GenericTextField origLongTF,
							origLatTF,
							destLongTF,
							destLatTF,
							altitudeTF,
							speedTF,
							intermediatePtTF,
							timeIntervalTF,
							radiansTF,
							kilometersTF,
							milesTF,
							nauticalMilesTF,
							millisecondsTF,
							secondsTF,
							minutesTF,
							hoursTF,
							headingRadTF,
							headingDegTF,
							multiTrackTF,
							offsetBetweenTracksTF;

	private JTable table;

	private FlightPath flightPath;
	
	private MultiTrackFlightPath multiTrackFlightPath;

}


public class createFlightPath
{
	public static void main(String [] args)
	{
		FlightPathGui path = new FlightPathGui();
		path.setVisible(true);
	}
}
